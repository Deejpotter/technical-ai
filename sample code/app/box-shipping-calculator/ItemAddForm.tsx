/**
 * ItemAddForm
 * Updated: 05/13/2025
 * Author: Deej Potter
 * Description: Form component for adding new items to the shipping calculator.
 * Handles input validation and item creation with proper dimensioning.
 * Enhanced with Bootstrap styling, improved validation, and better user feedback.
 */

"use client";
import React, { useState } from "react";
import ShippingItem from "@/types/box-shipping-calculator/ShippingItem";
import { Plus, RotateCcw, PenTool } from "lucide-react"; // Icons for better UX

interface ItemAddFormProps {
	onAddItem: (item: ShippingItem) => void;
}

export default function ItemAddForm({ onAddItem }: ItemAddFormProps) {
	// State for form fields
	const [name, setName] = useState("");
	const [sku, setSku] = useState("");
	const [length, setLength] = useState("");
	const [width, setWidth] = useState("");
	const [height, setHeight] = useState("");
	const [weight, setWeight] = useState("");

	// State for form validation
	const [validated, setValidated] = useState(false);
	const [isSubmitting, setIsSubmitting] = useState(false);
	const [isTouched, setIsTouched] = useState({
		name: false,
		length: false,
		width: false,
		height: false,
		weight: false,
	});

	/**
	 * Reset form to initial state
	 * Clears all input fields and validation state
	 */
	const resetForm = () => {
		setName("");
		setSku("");
		setLength("");
		setWidth("");
		setHeight("");
		setWeight("");
		setValidated(false);
		setIsTouched({
			name: false,
			length: false,
			width: false,
			height: false,
			weight: false,
		});
	};

	/**
	 * Fill form with sample dimensions
	 * Helps users by providing common dimension templates
	 * @param preset The preset name to apply
	 */
	const applyDimensionPreset = (preset: string) => {
		switch (preset) {
			case "small":
				setLength("100");
				setWidth("80");
				setHeight("30");
				setWeight("250");
				break;
			case "medium":
				setLength("200");
				setWidth("150");
				setHeight("50");
				setWeight("500");
				break;
			case "large":
				setLength("300");
				setWidth("200");
				setHeight("100");
				setWeight("1000");
				break;
			default:
				break;
		}

		// Mark all dimension fields as touched
		setIsTouched((prev) => ({
			...prev,
			length: true,
			width: true,
			height: true,
			weight: true,
		}));
	};

	/**
	 * Handle form submission with validation
	 * Creates a new shipping item and passes it to the parent component
	 * Provides visual feedback during submission
	 * @param e Form submit event
	 */
	const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
		e.preventDefault();

		// Mark form as validated to show validation feedback
		setValidated(true);

		const form = e.currentTarget;
		if (form.checkValidity() === false) {
			e.stopPropagation();
			return;
		}

		setIsSubmitting(true);

		// Create new item with unique ID
		const newItem: ShippingItem = {
			_id: null, // ID will be generated by the database
			name, // Use the name provided in the form
			sku: sku || "", // Use empty string if SKU is not provided
			length: Math.round(Number(length)),
			width: Math.round(Number(width)),
			height: Math.round(Number(height)),
			weight: Math.round(Number(weight)),
			deletedAt: null,
			updatedAt: new Date(),
			quantity: 1,
		};

		// Add item and reset form with a small delay to show feedback
		setTimeout(() => {
			onAddItem(newItem);
			resetForm();
			setIsSubmitting(false);
		}, 300);
	};

	return (
		<form
			onSubmit={handleSubmit}
			className={`needs-validation ${validated ? "was-validated" : ""}`}
			noValidate
		>
			<div className="card mb-4">
				<div className="card-header bg-light">
					<h5 className="card-title mb-0">
						<PenTool size={16} className="me-2" />
						Add New Item
					</h5>
				</div>
				<div className="card-body">
					<div className="mb-3">
						<label htmlFor="item-name" className="form-label">
							Name:
						</label>
						<input
							id="item-name"
							type="text"
							value={name}
							onChange={(e) => setName(e.target.value)}
							onBlur={() => setIsTouched((prev) => ({ ...prev, name: true }))}
							required
							className={`form-control ${
								isTouched.name && !name ? "is-invalid" : ""
							}`}
							placeholder="Enter item name"
						/>
						<div className="invalid-feedback">Please provide an item name.</div>
					</div>

					<div className="mb-3">
						<label htmlFor="item-sku" className="form-label">
							SKU:
						</label>
						<input
							id="item-sku"
							type="text"
							value={sku}
							onChange={(e) => setSku(e.target.value)}
							className="form-control"
							placeholder="Enter SKU"
						/>
					</div>

					{/* Dimension Presets */}
					<div className="mb-3">
						<label className="form-label">Dimension Presets:</label>
						<div className="d-flex gap-2">
							<button
								type="button"
								className="btn btn-outline-secondary btn-sm"
								onClick={() => applyDimensionPreset("small")}
							>
								Small Item
							</button>
							<button
								type="button"
								className="btn btn-outline-secondary btn-sm"
								onClick={() => applyDimensionPreset("medium")}
							>
								Medium Item
							</button>
							<button
								type="button"
								className="btn btn-outline-secondary btn-sm"
								onClick={() => applyDimensionPreset("large")}
							>
								Large Item
							</button>
						</div>
						<div className="form-text text-muted">
							Click a preset to quickly fill dimension fields
						</div>
					</div>

					<div className="row g-3 mb-3">
						<div className="col-md-6">
							<label htmlFor="item-length" className="form-label">
								Length:
							</label>
							<div className="input-group">
								{" "}
								<input
									id="item-length"
									type="number"
									value={length}
									onChange={(e) => {
										const rawValue = e.target.value;
										const numValue = Number(rawValue);
										if (!isNaN(numValue) && rawValue) {
											setLength(String(Math.round(numValue)));
										} else {
											setLength(rawValue);
										}
									}}
									onBlur={() =>
										setIsTouched((prev) => ({ ...prev, length: true }))
									}
									required
									min="1"
									step="1"
									pattern="[0-9]*"
									className={`form-control ${
										isTouched.length && (!length || Number(length) < 1)
											? "is-invalid"
											: ""
									}`}
									placeholder="Length"
								/>
								<span className="input-group-text">mm</span>
								<div className="invalid-feedback">
									Please provide a valid length (greater than 0).
								</div>
							</div>
						</div>

						<div className="col-md-6">
							<label htmlFor="item-width" className="form-label">
								Width:
							</label>
							<div className="input-group">
								{" "}
								<input
									id="item-width"
									type="number"
									value={width}
									onChange={(e) => {
										const rawValue = e.target.value;
										const numValue = Number(rawValue);
										if (!isNaN(numValue) && rawValue) {
											setWidth(String(Math.round(numValue)));
										} else {
											setWidth(rawValue);
										}
									}}
									onBlur={() =>
										setIsTouched((prev) => ({ ...prev, width: true }))
									}
									required
									min="1"
									step="1"
									pattern="[0-9]*"
									className={`form-control ${
										isTouched.width && (!width || Number(width) < 1)
											? "is-invalid"
											: ""
									}`}
									placeholder="Width"
								/>
								<span className="input-group-text">mm</span>
								<div className="invalid-feedback">
									Please provide a valid width (greater than 0).
								</div>
							</div>
						</div>

						<div className="col-md-6">
							<label htmlFor="item-height" className="form-label">
								Height:
							</label>
							<div className="input-group">
								{" "}
								<input
									id="item-height"
									type="number"
									value={height}
									onChange={(e) => {
										const rawValue = e.target.value;
										const numValue = Number(rawValue);
										if (!isNaN(numValue) && rawValue) {
											setHeight(String(Math.round(numValue)));
										} else {
											setHeight(rawValue);
										}
									}}
									onBlur={() =>
										setIsTouched((prev) => ({ ...prev, height: true }))
									}
									required
									min="1"
									step="1"
									pattern="[0-9]*"
									className={`form-control ${
										isTouched.height && (!height || Number(height) < 1)
											? "is-invalid"
											: ""
									}`}
									placeholder="Height"
								/>
								<span className="input-group-text">mm</span>
								<div className="invalid-feedback">
									Please provide a valid height (greater than 0).
								</div>
							</div>
						</div>

						<div className="col-md-6">
							<label htmlFor="item-weight" className="form-label">
								Weight:
							</label>
							<div className="input-group">
								{" "}
								<input
									id="item-weight"
									type="number"
									value={weight}
									onChange={(e) => {
										const rawValue = e.target.value;
										const numValue = Number(rawValue);
										if (!isNaN(numValue) && rawValue) {
											setWeight(String(Math.round(numValue)));
										} else {
											setWeight(rawValue);
										}
									}}
									onBlur={() =>
										setIsTouched((prev) => ({ ...prev, weight: true }))
									}
									required
									min="1"
									step="1"
									pattern="[0-9]*"
									className={`form-control ${
										isTouched.weight && (!weight || Number(weight) < 1)
											? "is-invalid"
											: ""
									}`}
									placeholder="Weight"
								/>
								<span className="input-group-text">g</span>
								<div className="invalid-feedback">
									Please provide a valid weight (greater than 0).
								</div>
							</div>
						</div>
					</div>
				</div>
				<div className="card-footer bg-light">
					<div className="d-flex gap-2">
						<button
							type="submit"
							disabled={isSubmitting}
							className="btn btn-primary flex-grow-1"
						>
							{isSubmitting ? (
								<>
									<span className="spinner-border spinner-border-sm me-2" />
									Adding...
								</>
							) : (
								<>
									<Plus size={16} className="me-1" />
									Add Item
								</>
							)}
						</button>
						<button
							type="button"
							onClick={resetForm}
							className="btn btn-outline-secondary"
						>
							<RotateCcw size={16} />
							<span className="d-none d-md-inline ms-1">Reset</span>
						</button>
					</div>
				</div>
			</div>
		</form>
	);
}
