"use client";
import LayoutContainer from "@/components/LayoutContainer";
import React, { useState, useEffect, useCallback } from "react";

interface Extrusion {
	type: string;
	quantity: number;
	length: number;
	tapping: string;
}

interface Totals {
	withGST: number;
	withoutGST: number;
}

const gstRate = 0.1; // Assuming 10% GST, adjust as needed
const perMeterCost: { [key: string]: { [key: string]: number } } = {
	"4040": { nonTapped: 72.8, tappedOneEnd: 73.8, tappedBothEnds: 74.8 },
	"4080": { nonTapped: 192.13, tappedOneEnd: 193.13, tappedBothEnds: 194.13 },
};

export default function ExtrusionPricingCalculator() {
	const [extrusions, setExtrusions] = useState<Extrusion[]>([
		{
			type: "4040",
			quantity: 2,
			length: 2850,
			tapping: "nonTapped",
		},
	]);
	const [totals, setTotals] = useState<Totals>({ withGST: 0, withoutGST: 0 });
	const [sku, setSku] = useState("");
	
	/**
	 * Calculate the total prices with and without GST based on the current extrusions
	 */
	const calculateTotals = useCallback(() => {
		let totalWithGST = 0;

		extrusions.forEach((extrusion) => {
			const pricePerUnit = perMeterCost[extrusion.type][extrusion.tapping];
			const totalPriceWithGST =
				(pricePerUnit / 3050) * extrusion.length * extrusion.quantity;
			totalWithGST += totalPriceWithGST;
		});

		// Calculate the total price without GST by dividing the total with GST by (1 + gstRate)
		const totalWithoutGST = totalWithGST / (1 + gstRate);

		setTotals({ withGST: totalWithGST, withoutGST: totalWithoutGST });
	}, [extrusions]);

	/**
	 * Generate a SKU for the current extrusion configuration
	 */
	const generateSKU = useCallback(() => {
		const skuParts = extrusions.map((extrusion) => {
			let tappingOptionReadable = "";
			switch (extrusion.tapping) {
				case "nonTapped":
					tappingOptionReadable = "Not Tapped";
					break;
				case "tappedOneEnd":
					tappingOptionReadable = "Tapped on One End";
					break;
				case "tappedBothEnds":
					tappingOptionReadable = "Tapped on Both Ends";
					break;
				default:
					tappingOptionReadable = "";
			}
			return `${extrusion.quantity} x ${extrusion.type}-${extrusion.length}-${tappingOptionReadable}`;
		});

		setSku(skuParts.join(", "));
	}, [extrusions]);

	/**
	 * Update calculations when extrusions change
	 */
	useEffect(() => {
		calculateTotals();
		generateSKU();
	}, [extrusions, calculateTotals, generateSKU]);

	const handleInputChange = (
		index: number,
		field: keyof Extrusion,
		value: string | number
	) => {
		const updatedExtrusions = extrusions.map((extrusion, i) => {
			if (i === index) {
				return { ...extrusion, [field]: value };
			}
			return extrusion;
		});
		setExtrusions(updatedExtrusions);
	};

	return (
		<LayoutContainer>
			<div>
				{extrusions.map((extrusion, index) => (
					<div key={index}>
						<input
							type="number"
							name="length"
							value={extrusion.length}
							onChange={(e) =>
								handleInputChange(index, "length", parseFloat(e.target.value))
							}
							placeholder="Length (mm)"
						/>
						<input
							type="number"
							name="quantity"
							value={extrusion.quantity}
							onChange={(e) =>
								handleInputChange(index, "quantity", parseInt(e.target.value, 10))
							}
							placeholder="Quantity"
						/>
						<select
							name="type"
							value={extrusion.type}
							onChange={(e) => handleInputChange(index, "type", e.target.value)}
						>
							<option value="4040">40x40</option>
							<option value="4080">40x80</option>
						</select>
						<select
							name="tapping"
							value={extrusion.tapping}
							onChange={(e) =>
								handleInputChange(index, "tapping", e.target.value)
							}
						>
							<option value="nonTapped">Not Tapped</option>
							<option value="tappedOneEnd">Tapped on One End</option>
							<option value="tappedBothEnds">Tapped on Both Ends</option>
						</select>
					</div>
				))}
				<p>SKU: {sku}</p>
				<p>Total Price without GST: ${totals.withoutGST.toFixed(2)}</p>
				<p>Total Price with GST: ${totals.withGST.toFixed(2)}</p>
			</div>
		</LayoutContainer>
	);
}
